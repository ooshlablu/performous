name: Build and Release Performous

# Controls when the workflow will run
on:
  # Triggers the workflow on merges to master, all PRs, and release tags 
  push:
    branches:
      - master
      - fake-master
      - github-actions
    tags:
      - '[0-9]+\.[0-9]+\.[0-9]+'
      - '[0-9]+\.[0-9]+\.[0-9]+-rc[0-9]+'

  # On anything pull request related
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  WINDOWS_VCPKG_CACHE: "vcpkg_installed"
jobs:
  # Set up a release that packages will be published to.
  create_release:
    name: Create the release all builds will post to
    runs-on: ubuntu-latest
    # Make sure the output variable for this step is set so it
    # can be consumed by later build steps
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create the release
        id: create_release
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/create-release@v1
        env:
          # This token is automatically generated with each virtual session
          # DO NOT create this in the secrets manager
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: true
          prerelease: true

  # Create the Linux Packages
  # This is done in containers provided by
  # https://github.com/performous/performous-docker since
  # github actions provides only Ubuntu
  Linux_Packages:
    if: ${{ false }}  # disable for now
    # The upload step needs the release to be created first so it
    # can access the upload_url output
    needs: create_release
    # Ubuntu required for Linux containers
    runs-on: ubuntu-latest
    container: performous/deps:${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu18.04
          - ubuntu20.04
          - ubuntu22.04
          - fedora33
          - fedora34
          - fedora35
    steps:
      - name: Checkout Git
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build package
        id: build_package
        run: |
          # Pull in OS variables to figure out options later
          . /etc/os-release

          ## Set up some special cmake flags for fedora
          if [ "${ID}" == "fedora" ]; then
            EXTRA_CMAKE_ARGS="-DUSE_BOOST_REGEX=1"
          fi

          ## Figure out what type of packages we need to generate
          case ${ID} in
            'fedora')
          PACKAGE_TYPE='RPM';;
            'ubuntu')
          PACKAGE_TYPE='DEB';;
            *)
          PACKAGE_TYPE='TAR';;
          esac

          # Build the Packages
          mkdir build_cmake
          cd build_cmake
          cmake ${EXTRA_CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Release\
            -DENABLE_WEBSERVER=ON\
            -DCMAKE_VERBOSE_MAKEFILE=1\
            -DENABLE_WEBCAM=ON ..
          CPU_CORES=$(nproc --all)
          make -j${CPU_CORES}
          cpack -G ${PACKAGE_TYPE}
          
          # Do some mangling to make a unique name based on the OS
          # This is needed so we don't overwite in the release each time.
          # We should probably investigate what cmake can do for package output
          # to make this cleaner in the future
          WORK_DIR=$(pwd)
          PACKAGE_NAME=$(ls ${WORK_DIR}/Performous*-Linux.*)
          PACKAGE_PREFIX=$(echo ${PACKAGE_NAME} | cut -d '.' -f1)
          PACKAGE_SUFFIX=$(echo ${PACKAGE_NAME} | cut -d '.' -f2)
          mv ${PACKAGE_NAME} ${PACKAGE_PREFIX}-${ID}_${VERSION_ID}.${PACKAGE_SUFFIX}
          ARTIFACT_PATH=$(ls ${WORK_DIR}/Performous*-Linux-*.*)
          ARTIFACT_NAME=$(echo ${ARTIFACT_PATH} | rev | cut -d '/' -f1 | rev)
          echo "ARTIFACT_PATH=${ARTIFACT_PATH}" >> ${GITHUB_ENV}
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> ${GITHUB_ENV} 

      - name: Upload release assets
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/octet-stream

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}


#      - name: echo value
#        run: |
#          echo ${{ github.event.issue.number }}
#          echo ${{ github.event.pull_request.number }}
#          echo ${{ github.event.client_payload.checkrunid }}
#          echo ${{ github.repository }}
#      - name: comment pr
#        uses: peter-evans/create-or-update-comment@v1
#        with:
#          issue-number: ${{ github.event.pull_request.number }}
#          body: |
#            "Artifacts: https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
#            The artifacts url is https://github.com/${{ github.repository }}/suites/${{ steps.getsuiteid.outputs.suiteid }}/artifacts/${{ steps.getartid.outputs.artid }}
  test:
    runs-on: ubuntu-latest
    steps:
      - run: |
          dd if=/dev/zero of=file.gz bs=1024 count=50

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: file.gz
          path: file.gz


  Update_PR_With_Artifacts:
    needs: test 
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - name: echo value
        run: |
          echo ${{ github.event.issue.number }}
          echo ${{ github.event.pull_request.number }}
          echo ${{ github.event.client_payload.checkrunid }}
          echo ${{ github.repository }}
      - name: comment pr
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            "Artifacts: https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"

  # Create the MacOS dmg
  MacOS_Packages:
    if: ${{ false }}  # disable for now
    # The upload step needs the release to be created first so it
    # can access the upload_url output
    needs: create_release
    # Ubuntu required for Linux containers
    runs-on: macos-latest
    steps:
      - name: Checkout Git
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Dependencies
        id: install_deps
        run: |
           brew install boost cmake ffmpeg@4 help2man icu4c portaudio portmidi\
             opencv libepoxy librsvg libxml++3 sdl2 dylibbundler asio fftw glm
           brew link ffmpeg@4

      - name: Build package
        id: build_package
        run: |
          cd osx-utils
          chmod +x ./performous-app-build.sh
          ./performous-app-build.sh
          echo "ARTIFACT_PATH=$(pwd)/Performous.dmg" >> ${GITHUB_ENV}

      - name: Upload release assets
        id: upload_assets
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: Performous.dmg
          asset_content_type: application/octet-stream

      - name: Upload PR assets
        id: upload_pr
        if: ${{ github.event_name == 'pull_request' }}
        uses: gavv/pull-request-artifacts@v1.0.0
        with:
          commit: ${{ github.event.pull_request.head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          artifacts-repo: ooshlablu/performous-artifacts
          artifacts: |
            ${{ env.ARTIFACT_PATH }}

  Windows_Packages:
    if: ${{ false }}
    needs: create_release
    runs-on: windows-latest
    steps:
      - name: Checkout Git
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: seanmiddleditch/gha-setup-ninja@master
      
      #- name: Extract a zip and populate cache
      #  run: |
      #     mkdir build
      #     cd build
      #     mkdir x64-debug
      #     cd x64-debug
      #     Invoke-WebRequest -OutFile vcpkg_installed.zip -Uri https://asgardsings.nl/vcpkg_installed.zip
      #     7z x vcpkg_installed.zip
      #
      - name: Cache vcpkg compiled binaries
        uses: actions/cache@v3
        env:
          cache-name: cache-vcpkg
        with:
          path: ./build/x64-debug/vcpkg_installed
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/vcpkg.json') }}

      - name: Restore dependencies
        id: restore_dependencies-x64
        run: |
           cd build
           cmake .. -G Ninja --preset x64-debug
      
      - name: Build Performous
        id: build_performous_x64
        run: |
           cmake --build x64-debug
           
      - name: Create Installer
        id: package_performous_x64
        run: |
           cd x64-release
           cpack -G NSIS x64-release
           set ARTIFACT_PATH="${CPACK_BUILD_SOURCE_DIRS}/${CPACK_PACKAGE_FILE_NAME}.exe" >> ${GITHUB_ENV}
           set ARTIFACT_FILENAME="${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}.exe" >> ${GITHUB_ENV}

      - name: Upload release assets
        id: upload_assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_FILENAME }}
          asset_content_type: application/octet-stream
